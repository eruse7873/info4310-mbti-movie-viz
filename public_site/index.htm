<html lang="en">

<head>
    <title>MBTI</title>
    <script src="https://d3js.org/d3.v5.min.js">

    </script>
    <link rel="stylesheet" href="style.css">
</head>
<style>
    foreignObject h4 {
        font-family: 'Franklin Gothic', sans-serif;
        font-size: 18px;
        margin: 0px;
        text-align: center;
        text-transform: uppercase;
    }

    foreignObject h5 {
        font-family: 'Franklin Gothic', sans-serif;
        font-size: 15px;
        margin-top: 10px;
        margin-bottom: 20px;
        text-align: center;
        text-transform: uppercase;
    }


    foreignObject p {
        font-family: 'Franklin Gothic', sans-serif;
        font-size: 15px;
        text-align: center;
        text-transform: uppercase;
        margin: 0%;
    }

    foreignObject {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    }

    .first_part {
        display: flex;
        flex-direction: column;
        width: 700;
        height: 550;
    }

    .question {
        text-align: center;
    }
   

    .second_part {
        display: flex;
        flex-direction: column;
        width: 650;
        height: 300;
    }

    .questions {
        display: flex;
        flex-direction: column;
        width: 750;
    }

    .visualizations {
        display: flex;
        flex-direction: column;
        width: 780;
        margin-right:0;
    }

    .main {
        display: flex;
        flex-direction: row;
        row-gap: 10px;
        max-width: 100%;
    }

    .card_container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }
</style>

<body>
    <h1>Are You the Main Character?</h1>
    <h2>Find Your Movie Character Personality Compatibility Matches</h2>
    <div id=info>
        <p id =intro>
            <a href="https://www.personality-database.com/" target="blank">Personality Database</a>
            is a popular wiki website in which fans vote and guess their favorite fictional characters' personality
            types.
            This visualization uses a <a href='https://www.kaggle.com/datasets/subinium/movie-character-mbti-dataset'
                target="_blank">dataset</a> that contains almost 12,000 movie characters and their voted MBTI and
            Enneagram
            types, collected
            in 2021 by a Kaggle user. Selecting your MBTI and enneagram scores to discover how many movie
            characters are similar to you and who some of them are!
        <details>
            <summary>How are my compatibilites calculated?</summary>
            <p >
                Your movie character compatibilities are calculated using a scoring system of 0-4. Each MBTI consists of
                four letters with binary options corresponding to 1 point. If you also select an enneagram, which is
                also
                worth
                4 points, scores are
                calculated using a scoring system of 0-8.
            <p>Example I : You select INFP,</p>
            <ul>
                <li>Character A is also INFP. A gets 4 points because every letter matches. 4/4 = 100% compatibility.
                </li>
                <li>Character B is ESTJ. B gets 1 point because 1 letters match. 1/4 = 25% compatibility.</li>
            </ul>
            And all the characters in the dataset will receive a score corresponding to you!
            </p>
            <p>
                Example II: You also select an enneagram of 9.
            <ul>
                <li>Character A is also a 9! A gets 4 more points for a total and max of 8 points. 8/8 = 100%
                    compatibility.
                </li>
                <li>Character B is a 3. Enneagram types are related to others (see the selector below), and 3 is related
                    to
                    9! B gets 2 more points for a total of 3/8 = 37.5% compatibliity.</li>
            </ul>
            </p>
        </details>
    </div>
    <h3>Overall Distribution of MBTI for Movie Characters</h3>
    <svg id="bubbles" height="350" width="100%"></svg>
<div class = "main">
    <div class="questions">
        <div class="first_part">
            <div class="question">
                <h3>What's your MBTI?</h3>
                <p>If you don't know your Myers-Briggs Type Indicator, take the test <a
                        href='https://www.16personalities.com/free-personality-test' target="_blank">here!</a></p>
                <p class=citation>image sources: <a href='https://www.16personalities.com/'
                        target="_blank">https://www.16personalities.com/</a></p>
            </div>
            <div>
                <h4 id="titleMBTI">Analysts</h4>
            </div>
            <div>
                <div class="avatar_selector">

                    <!-- <svg id="avatar_display" height="300" width="550"></svg> -->
                    <div class="active analysts display">
                        <!-- <h5>Analysts</h5> -->

                        <div class="individual">
                            <img class="analyst avatars" src="avatars/architect.png" width="150" height="150">
                            <h6 style="text-align: center">INTJ</h6>
                            <h6 style="text-align: center">Architect</h6>

                        </div>
                        <div class="individual">
                            <img class="analyst avatars" src="avatars/logician.png" width="150" height="150">
                            <h6 style="text-align: center">INTP</h6>
                            <h6 style="text-align: center">Logician</h6>

                        </div>
                        <div class="individual">
                            <img class="analyst avatars" src="avatars/commander.png" width="150" height="150">
                            <h6 style="text-align: center">ENTJ</h6>
                            <h6 style="text-align: center">Commander</h6>

                        </div>
                        <div class="individual">
                            <img class="analyst avatars" src="avatars/debater.png" width="150" height="150">
                            <h6 style="text-align: center">ENTP</h6>
                            <h6 style="text-align: center">Debater</h6>

                        </div>
                    </div>

                    <div class="hidden diplomats display">

                        <!-- <h5>Diplomats</h5> -->
                        <div class="individual">

                            <img class="diplomats avatars" src="avatars/advocate.png" width="150" height="150">
                            <h6 style="text-align: center">INFJ</h6>
                            <h6 style="text-align: center">Advocate</h6>

                        </div>
                        <div class="individual">
                            <img class="diplomats avatars" src="avatars/mediator.png" width="150" height="150">
                            <h6 style="text-align: center">INFP</h6>
                            <h6 style="text-align: center">Mediator</h6>

                        </div>
                        <div class="individual">
                            <img class="diplomats avatars" src="avatars/protagonist.png" width="150" height="150">
                            <h6 style="text-align: center">ENFJ</h6>
                            <h6 style="text-align: center">Protagonist</h6>

                        </div>
                        <div class="individual">
                            <img class="diplomats avatars" src="avatars/campaigner.png" width="150" height="150">
                            <h6 style="text-align: center">ENFP</h6>
                            <h6 style="text-align: center">Campaigner</h6>

                        </div>
                    </div>

                    <div class="hidden sentinels display">
                        <!-- <h5>Sentinels</h5> -->
                        <div class="individual">
                            <img class="sentinels avatars" src="avatars/logistician.png" width="150" height="150">
                            <h6 style="text-align: center">ISTJ</h6>
                            <h6 style="text-align: center">Logistician</h6>

                        </div>
                        <div class="individual">
                            <img class="sentinels avatars" src="avatars/defender.png" width="150" height="150">
                            <h6 style="text-align: center">ISFJ</h6>
                            <h6 style="text-align: center">Defender</h6>

                        </div>
                        <div class="individual">
                            <img class="sentinels avatars" src="avatars/executive.png" width="150" height="150">
                            <h6 style="text-align: center">ESTJ</h6>
                            <h6 style="text-align: center">Executive</h6>

                        </div>
                        <div class="individual">
                            <img class="sentinels avatars" src="avatars/consul.png" width="150" height="150">
                            <h6 style="text-align: center">ESFJ</h6>
                            <h6 style="text-align: center">Consul</h6>

                        </div>
                    </div>

                    <div class="hidden explorers display">
                        <div class="individual">
                            <img class="explorers avatars" src="avatars/virtuoso.png" width="150" height="150">
                            <h6 style="text-align: center">ISTP</h6>
                            <h6 style="text-align: center">Virtuoso</h6>

                        </div>
                        <div class="individual">
                            <img class="explorers avatars" src="avatars/adventurer.png" width="150" height="150">
                            <h6 style="text-align: center">ISFP</h6>
                            <h6 style="text-align: center">Adventurer</h6>

                        </div>
                        <div class="individual">
                            <img class="explorers avatars" src="avatars/entrepreneur.png" width="150" height="150">
                            <h6 style="text-align: center">ESTP</h6>
                            <h6 style="text-align: center">Entrepreneur</h6>

                        </div>
                        <div class="individual">
                            <img class="explorers avatars" src="avatars/entertainer.png" width="150" height="150">
                            <h6 style="text-align: center">ESFP</h6>
                            <h6 style="text-align: center">Entertainer</h6>

                        </div>
                    </div>

                    <div class='contains_triangle'>
                        <img class='triangle' src="triangle.png" width="32" height="37">
                    </div>

                </div>
            </div>
        </div>



        <div class='second_part'>
            <div class="question">
                <h3>Optional: What's your Enneagram?</h3>
                <p>If you don't know your enneagram, take the test <a
                        href='https://www.truity.com/test/enneagram-personality-test' target="_blank">here!</a></p>
            </div>
            <div>
                <svg id="enneagramSelector" height="600" width="600"></svg>
            </div>
        </div>
    </div>

        <div class="visualizations">
            <div class="question">
                <h3>Your Movie Character Matches!</h3>
                <svg id="barchart" height="600" width="600"></svg>

            </div>
            <div class='card_container'>
                <svg id="cards" height="800" width="780"></svg>
            </div>

        </div>
    </div>
</div>

    <script>

        const svg = d3.select("svg#barchart");
        const width = svg.attr("width");
        const height = svg.attr("height");
        const margin = { top: 10, right: 10, bottom: 50, left: 150 };
        const chartWidth = width - margin.left - margin.right;
        const chartHeight = height - margin.top - margin.bottom;

        const bubblessvg = d3.select("svg#bubbles");
        const bubbleswidth = bubblessvg.attr("width");
        const bubblesheight = bubblessvg.attr("height");
        const bubblesmargin = { top: 10, right: 20, bottom: 10, left: 20 };
        const bubblesWidth = width - bubblesmargin.left - bubblesmargin.right;
        const bubblesHeight = height - bubblesmargin.top - bubblesmargin.bottom;

        const getCompatibility = async function () {
            let data = await d3.csv("mbti_clean.csv", d3.autotype);

            let mbti_counts = await d3.csv("mbti_counts.csv", d3.autotype);


            let running_compat = [];
            var running_graphnames = [];
            let running_mbti = [];

            const counts = []
            const mbtis = ["ENTJ","ENTP","INTJ","INTP", "INFJ", "INFP", "ENFJ", "ENFP", 
                            "ISTJ", "ISFJ", "ESTJ", "ESFJ", "ISTP", "ISFP", "ESTP", "ESFP"]
            const mbtiColors = ["rgb(115,77,95)", "rgb(179,135,157)", "rgb(88, 65, 100)", "rgb(144, 117, 159)",
                                "rgb(153, 194, 108)", "rgb(90, 117, 60)", "rgb(68, 96, 36)", "rgb(111, 157, 82)",
                                "rgb(28, 118, 120)", "rgb(54, 147, 149)", "rgb(113, 202, 204)", "rgb(94, 192, 217)",
                                "rgb(228, 199, 40)", "rgb(190, 143, 0)", "rgb(244, 214, 93)", "rgb(204, 172, 19)"];
            mbti_counts.forEach((d) => {
                counts.push(parseInt(d.count));
            })

            const bubbleExtent = d3.extent(counts);
            const bubbleScale = d3.scaleLinear().domain(bubbleExtent).range([30, 65]);

            const mbtiScale = d3.scalePoint().domain(mbtis).range([50, 300]);

            var bubblecolorScale = d3.scaleOrdinal()
                .domain(mbtis)
                .range(mbtiColors);

            const bubblesselector = d3.select("svg#bubbles").append("g");

            packedbubble = bubblesselector.selectAll('g.bubble')
                .data(mbti_counts)
                .join("g")
                .attr("id", "bubble")
                .attr("transform", `translate(${((bubblesWidth / 2) + 110)},${-100})`)
                .on('mouseover', mouseEntersBubble)
                .on('mouseout', mouseLeavesBubble);

            let blabels = packedbubble.append("text")
                .attr("id", "blabel")
                .attr("text-anchor", "middle")
                .attr("dominant-baseline", "middle")
                .attr("dy", ".35em")
                .attr("font-size", "16px")
                .attr("font-weight","bold")
                .attr("fill", 'white')
                .attr('pointer-events','none')

            var bubblenode = packedbubble.append("circle")
                .attr("class", "bubbles")
                .attr('cx', 0)
                .attr('cy', bubblesHeight / 2)
                .attr("fill", d => bubblecolorScale(d.mbti))
                .attr("stroke", "none")
                .style("stroke-width", 0)
                .attr('r', d => bubbleScale(d.count))
                .on("mouseover", function () { 
                    thisBubble = d3.select(this);
                    thisBubble.transition(100).attr("r", (bubbleScale(thisBubble.datum().count) + 10)) })
                .on("mouseout", function () {
                    thisBubble = d3.select(this);
                    thisBubble.transition(100).attr("r", (bubbleScale(thisBubble.datum().count))) });

            var bubblesim = d3.forceSimulation()
                .nodes(mbti_counts)
                .force("center", d3.forceCenter()
                    .x(bubblesWidth / 2)
                    .y(bubblesHeight / 2))
                .force("repulse", d3.forceManyBody()
                    .strength(0.005))
                .force("collision", d3.forceCollide()
                    .radius(d => (bubbleScale(d.count) + 3))
                    .iterations(1))
                .force("xpos", d3.forceX()
                    .strength(0.025))
                .force("ypos", d3.forceY()
                    .strength(0.5))
                .on("tick", function (d) {
                    bubblenode.attr("cx", d => Math.min(bubblesWidth, d.x))
                        .attr("cy", d => Math.min(bubblesHeight, d.y))

                    blabels.attr("x", d => Math.min(bubblesWidth, d.x))
                        .attr("y", d => Math.min(bubblesHeight, d.y))
                        .attr("width", "20")
                        .text(d => d.mbti)

                    blabels.raise()
                });
            while (bubblesim.alpha() > 0.01) {
                bubblesim.tick()
            }

            // Referenced 10/7/22 lecture from INFO 3300 - Jeff R.
            let tooltipWidth = 220;
            let tooltipHeight = 60;


            let tooltip = bubblesselector.append("g")
                .attr("class", "tooltip")
                .attr("visibility", "hidden");
            tooltip.append("rect")
                .attr("fill", "#a10159")
                .attr("opacity", 0.7)
                .attr("x", -tooltipWidth / 2.0)
                .attr("y", 0)
                .attr("rx", 20)
                .attr("ry", 20)
                .attr("width", tooltipWidth)
                .attr("height", tooltipHeight)
                
            let txt = tooltip.append("text")
                .attr("fill", "white")
                .attr("text-anchor", "middle")
                .attr("alignment-baseline", "hanging")
                .attr("x", 0)
                .attr("y", 2)
                // .attr("padding-top", '5')

            let txt2 = tooltip.append("text")
                .attr("fill", "white")
                .attr("text-anchor", "middle")
                .attr("alignment-baseline", "hanging")
                .attr("x", 0)
                .attr("y", 22)

            let txt3 = tooltip.append("text")
                .attr("fill", "white")
                .attr("text-anchor", "middle")
                .attr("alignment-baseline", "hanging")
                .attr("x", 0)
                .attr("y", 42)


            function mouseEntersBubble() {
                tooltip.style("visibility", "visible")

                let selectedbubble = d3.select(this);


                let selectedbubbleMBTI = selectedbubble.datum().mbti;
                let selectedbubbleCount = selectedbubble.datum().count;
                let selectedbubblePercent = selectedbubble.datum().percentage;


                txt.text(selectedbubbleMBTI);
                txt2.text('Total Count: ' + selectedbubbleCount);
                txt3.text('% of Characters: ' + selectedbubblePercent);

                let xPos = selectedbubble.datum().x;
                let yPos = selectedbubble.datum().y;

                tooltip.attr("transform", `translate(${((bubblesWidth / 2) +110 + xPos)},${-100 + yPos + 20})`);

            }

            function mouseLeavesBubble() {
                tooltip.style("visibility", "hidden");
            }


            d3.select(".triangle")
                .on('click', changeAvatars);

            function changeAvatars() {
                titleMBTI = d3.select('#titleMBTI').text('')

                if (d3.selectAll(".analysts").classed("active")) {


                    d3.selectAll(".analysts")
                        .classed("active", false);
                    d3.selectAll(".analysts")
                        .classed("hidden", true);


                    d3.select(".analystcontainer")
                        .classed("active", false);
                    // .classed("hidden", true);

                    d3.selectAll(".diplomats")
                        .classed("active", true);
                    d3.selectAll(".diplomats")
                        .classed("hidden", false);

                    titleMBTI.text('Diplomats')
                }


                else if (d3.selectAll(".diplomats").classed("active")) {

                    d3.selectAll(".diplomats")
                        .classed("active", false);
                    d3.selectAll(".diplomats")
                        .classed("hidden", true);


                    d3.select(".diplomatcontainer")
                        .classed("active", false)
                        .classed("hidden", true);

                    d3.selectAll(".sentinels")
                        .classed("active", true);
                    d3.selectAll(".sentinels")
                        .classed("hidden", false);
                    titleMBTI.text('Sentinels')

                }

                else if (d3.selectAll(".sentinels").classed("active")) {


                    d3.selectAll(".sentinels")
                        .classed("active", false);
                    d3.selectAll(".sentinels")
                        .classed("hidden", true);

                    d3.select(".sentinelcontainer")
                        .classed("active", false)
                        .classed("hidden", true);

                    d3.selectAll(".explorers")
                        .classed("active", true);
                    d3.selectAll(".explorers")
                        .classed("hidden", false);

                    titleMBTI.text('Explorers')

                }

                else if (d3.selectAll(".explorers").classed("active")) {

                    d3.selectAll(".explorers")
                        .classed("active", false);
                    d3.selectAll(".explorers")
                        .classed("hidden", true);

                    d3.select(".explorercontainer")
                        .classed("active", false)
                        .classed("hidden", true);

                    d3.selectAll(".analysts")
                        .classed("active", true);
                    d3.selectAll(".analysts")
                        .classed("hidden", false);

                    titleMBTI.text('Analysts')

                }
            }


            d3.selectAll(".individual").classed('border', false)
                .on("click", chooseMBTI)


                .on("mouseover", function () {
                    let border = d3.select(this)
                    border.style('border', '3px solid #ffbae0')
                })
                .on("mouseout", function () {
                    let border = d3.select(this)
                    let borderClass = border.classed('border')
                    if (!borderClass) {
                        border.style('border', '3px solid transparent')
                    }
                });



            function chooseMBTI() {

                d3.selectAll(".individual").style('border', '3px solid transparent').classed('border', false);
                let border = d3.select(this);
                border.style('border', '3px solid #ffbae0');
                let borderClass = border.classed('border', true)


                input_mbti = d3.select(this).select(".individual h6").text();
                running_mbti = input_mbti;
                infoList = getCharacterInfo(input_mbti, false);

                mbtiBars(infoList[0]);

                makeCards(infoList[1]);

            }


            function getCharacterInfo(input_mbti, enneagramselected) {
                function getRandomCharacter(arr) {
                    const randomIndex = Math.floor(Math.random() * arr.length);
                    let character = arr[randomIndex];
                    return character;
                }


                if (enneagramselected === false) {
                    // new object array compat contains mbti, role, movie and a compat score (0-4) based on mbti similarity
                    var compat = [];

                    // loop through each character
                    for (let x = 0; x < data.length; x++) {

                        // reset compatibility count to 0 for each new character
                        count = 0;

                        // loop through mbti of each character
                        for (let i = 0; i < 4; i++) {

                            // get a count for compatibility
                            if (input_mbti.charAt(i) === data[x]['mbti'].charAt(i)) {
                                count += 1;
                            }
                        }

                        // create array of character name, movie title, and compatibility
                        // push to object array

                        let info = [data[x]['mbti'], data[x]['enn_1'], data[x]['role'], data[x]['movie'], count, data[x]['img_filepath']];
                        compat.push(info);
                    }

                    running_compat = compat;
                    // get random characters from each compat score

                    // new arrays for each of the different compat scores
                    compat0 = [];
                    compat25 = [];
                    compat50 = [];
                    compat75 = [];
                    compat100 = [];

                    for (let x = 0; x < compat.length; x++) {
                        if (compat[x]['4'] === 0) {
                            compat[x].push('0% Compatible');
                            compat0.push(compat[x]);
                        }
                        else if (compat[x]['4'] === 1) {
                            compat[x].push('25% Compatible');
                            compat25.push(compat[x]);
                        }
                        else if (compat[x]['4'] === 2) {
                            compat[x].push('50% Compatible');
                            compat50.push(compat[x]);
                        }
                        else if (compat[x]['4'] === 3) {
                            compat[x].push('75% Compatible');
                            compat75.push(compat[x]);
                        }
                        else if (compat[x]['4'] === 4) {
                            compat[x].push('100% Compatible');
                            compat100.push(compat[x]);
                        }
                    }

                    //hist_counts contains counts the number of characters in each compatability bracket. To be used in the histogram.
                    const hist_counts = []

                    hist_counts.push(['All MBTI Traits', compat100.length]);
                    hist_counts.push(['3 MBTI Traits', compat75.length]);
                    hist_counts.push(['2 MBTI Traits', compat50.length]);
                    hist_counts.push(['1 MBTI Traits', compat25.length]);
                    hist_counts.push(['No MBTI Traits', compat0.length]);

                    // graphNames contains one random character from each mbti compat

                    var graphNames = [];
                    graphNames.push(getRandomCharacter(compat0));
                    graphNames.push(getRandomCharacter(compat25));
                    graphNames.push(getRandomCharacter(compat50));
                    graphNames.push(getRandomCharacter(compat75));
                    graphNames.push(getRandomCharacter(compat100));



                    // return graphNames;
                    running_graphnames = graphNames;

                    return [hist_counts, graphNames];


                }

                else if (enneagramselected === true) {

                    enneagram_lines = {}
                    enneagram_lines["1"] = [7, 4]
                    enneagram_lines["2"] = [8, 4]
                    enneagram_lines["3"] = [9, 6]
                    enneagram_lines["4"] = [1, 2]
                    enneagram_lines["5"] = [7, 8]
                    enneagram_lines["6"] = [9, 3]
                    enneagram_lines["7"] = [5, 1]
                    enneagram_lines["8"] = [5, 2]
                    enneagram_lines["9"] = [3, 6]

                    const erunning_compat = running_compat;

                    erunning_compat.forEach((d) => {
                        characters_e = d[1]
                        //don't take input_mbti to mean what it suggests.... this is actually the input enneagram
                        input_e = input_mbti

                        if (characters_e == input_e) {
                            d[4] = d[4] + 4
                        }


                        else if (enneagram_lines[characters_e].includes(input_e)) {
                            d[4] = d[4] + 2
                        }
                        else {
                            d[4] = d[4]
                        }

                    });
                    ecompat0 = [];
                    ecompat12_5 = [];
                    ecompat25 = [];
                    ecompat37_5 = [];
                    ecompat50 = [];
                    ecompat62_5 = [];
                    ecompat75 = [];
                    ecompat87_5 = [];
                    ecompat100 = [];

                    for (let x = 0; x < erunning_compat.length; x++) {
                        if (erunning_compat[x]['4'] === 0) {
                            erunning_compat[x].push('0%');
                            ecompat0.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 1) {
                            erunning_compat[x].push('12.5%');
                            ecompat12_5.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 2) {
                            erunning_compat[x].push('25%');
                            ecompat25.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 3) {
                            erunning_compat[x].push('37.5%');
                            ecompat37_5.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 4) {
                            erunning_compat[x].push('50%');
                            ecompat50.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 5) {
                            erunning_compat[x].push('62.5%');
                            ecompat62_5.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 6) {
                            erunning_compat[x].push('75%');
                            ecompat75.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 7) {
                            erunning_compat[x].push('87.5%');
                            ecompat87_5.push(erunning_compat[x]);
                        }
                        else if (erunning_compat[x]['4'] === 8) {
                            erunning_compat[x].push('100%');
                            ecompat100.push(erunning_compat[x]);
                        }
                    }
                    const ehist_counts = []

                    ehist_counts.push(['100% Compatible', ecompat100.length]);
                    ehist_counts.push(['87.5% Compatible', ecompat87_5.length]);
                    ehist_counts.push(['75% Compatible', ecompat75.length]);
                    ehist_counts.push(['62.5% Compatible', ecompat62_5.length]);
                    ehist_counts.push(['50% Compatible', ecompat50.length]);
                    ehist_counts.push(['37.5% Compatible', ecompat37_5.length]);
                    ehist_counts.push(['25% Compatible', ecompat25.length]);
                    ehist_counts.push(['12.5% Compatible', ecompat12_5.length]);
                    ehist_counts.push(['0% Compatible', ecompat0.length]);

                    var egraphNames = [];
                    egraphNames.push(getRandomCharacter(ecompat0));
                    egraphNames.push(getRandomCharacter(ecompat12_5));
                    egraphNames.push(getRandomCharacter(ecompat25));
                    egraphNames.push(getRandomCharacter(ecompat37_5));
                    egraphNames.push(getRandomCharacter(ecompat50));
                    egraphNames.push(getRandomCharacter(ecompat62_5));
                    egraphNames.push(getRandomCharacter(ecompat75));
                    egraphNames.push(getRandomCharacter(ecompat87_5));
                    egraphNames.push(getRandomCharacter(ecompat100));


                    running_graphnames = egraphNames;

                    return ehist_counts

                }




            }


            // making bar chart
            let annotations = svg.append("g").attr("id", "annotations");
            let chartArea = svg.append("g").attr("id", "points")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            let leftAxis = d3.axisLeft();
            let leftAxisG = annotations.append("g")
                .attr("class", "y-axis")
                .attr("transform", `translate(${margin.left - 1}, ${margin.top})`);

            let bottomAxis = d3.axisBottom();
            let bottomAxisG = annotations.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(${margin.left - 1},${chartHeight + margin.top})`)


            function mbtiBars(alist) {
                const values = []
                alist.forEach((d) => {
                    values.push(d[1])
                })

                // intial left axis and gridlines, leave it to update later
                //make some condition so function can decide between which axis to create
                if (alist[0][0] === "All MBTI Traits") {
                    leftAxisScale = d3.scaleBand().domain(["No MBTI Traits",
                        "1 MBTI Traits",
                        "2 MBTI Traits",
                        "3 MBTI Traits",
                        "All MBTI Traits"]).range([chartHeight, 0]).padding(0.05);
                }
                else {
                    leftAxisScale = d3.scaleBand().domain(["0% Compatible", "12.5% Compatible", "25% Compatible", "37.5% Compatible", "50% Compatible", "62.5% Compatible", "75% Compatible", "87.5% Compatible", "100% Compatible"]).range([chartHeight, 0]).padding(0.05);


                }
                const histExtent = d3.extent(values)

                const histScale = d3.scaleLinear().domain([0, histExtent[1]]).range([0, chartWidth]);

                bottomAxis.scale(histScale)
                bottomAxisG.transition().call(bottomAxis);


                leftAxis.scale(leftAxisScale)
                leftAxisG.transition().call(leftAxis);


                chartArea.selectAll('rect.bar').data(alist)
                    .join(enter => enter.append('rect')
                        .attr('class', 'bar')
                        .attr("fill", barChartColor(input_mbti))
                        .attr("x", d => histScale(0))
                        .attr("y", d => leftAxisScale(d[0]))
                        .attr("height", leftAxisScale.bandwidth())
                        .attr("width", d => histScale(d[1]) - histScale(0))
                        .attr("opacity", 0)
                        .call(enter => enter.transition()
                            .attr('opacity', 1)),
                        update => update.call(update => update.transition()  
                            .attr("fill", barChartColor(input_mbti))
                            .attr("x", d => histScale(0))
                            .attr("y", d => leftAxisScale(d[0]))
                            .attr("height", leftAxisScale.bandwidth())
                            .attr("width", d => histScale(d[1]) - histScale(0))),
                        exit => exit.call(exit => exit.transition().attr('opacity', 0).remove()));
            }



            function makeCards(graphNamesG) {

                // creating the character cards
                const card = d3.select("svg#cards");
                const cardWidth = card.attr("width");


                let enneagramcards = 0;

                if (graphNamesG.length > 7) {
                    enneagramcards = [graphNamesG[0],
                                        graphNamesG[2],
                                        graphNamesG[4],
                                        graphNamesG[6],
                                        graphNamesG[8]];



                }
                else {enneagramcards = graphNamesG;}

                // loop through list of random names, make a card for each character
                d3.selectAll("foreignObject").remove();

                var i = 5;
                for (x = 0; x < enneagramcards.length; x++) {

                    var fo = card.append('foreignObject')
                        .attr("width", 130)
                        .attr("height", 350)
                        .attr("x", 0 + i)
                        .attr("y", 0);

                    var div = fo.append('xhtml:div')
                        .attr("transform", `translate(${margin.left},${margin.top})`)
                        .attr("class", "divcard");

                    div.append("img").attr("src", enneagramcards[x]['5']).attr("width", "100%").attr("height", "40%").style("background-color", "#EEEE");
                    let textDiv = div.append("div")
                    if (graphNamesG.length>7){
                        textDiv.append("h5").html(enneagramcards[x]['7'] + " match");
                        textDiv.append("h4").html(enneagramcards[x]['2']).style('text-transform', 'none');
                        textDiv.append("h5").html(enneagramcards[x]['3']).style('font-style', 'italic').style('text-transform', 'none');
                        textDiv.append("p").html("MBTI: " + enneagramcards[x]['0']);
                        textDiv.append("p").html("enneagram: " + enneagramcards[x]['1'])
                        i = i + cardWidth / 5;
                    }
                    else {
                        textDiv.append("h5").html(enneagramcards[x]['6'] + " match");
                        textDiv.append("h4").html(enneagramcards[x]['2']).style('text-transform', 'none');
                        textDiv.append("h5").html(enneagramcards[x]['3']).style('font-style', 'italic').style('text-transform', 'none');
                        textDiv.append("p").html("MBTI: " + enneagramcards[x]['0']);
                        textDiv.append("p").html("enneagram: " + enneagramcards[x]['1'])
                        i = i + cardWidth / 5;
                    }
                    
                }
            }
            function barChartColor(mbti) {
                analysts = ["INTJ", "INTP", "ENTJ", "ENTP"]
                diplomats = ["INFJ", "INFP", "ENFJ", "ENFP"]
                sentinels = ["ISTJ", "ISFJ", "ESTJ", "ESFJ"]
                explorers = ["ISTP", "ISFP", "ESTP", "ESFP"]
                if (analysts.includes(mbti)) {
                    return "rgb(149,98,123)"
                }
                if (diplomats.includes(mbti)) {
                    return "rgb(153,194,108)"
                }
                if (sentinels.includes(mbti)) {
                    return "rgb(139,223,220)"
                }
                if (explorers.includes(mbti)) {
                    return "rgb(228,199,40)"
                }

            }


            let origin = 300;
            let radius = 150;
            var enneagramSelector = d3.select("svg#enneagramSelector").append('g');

            let nodeIDs = [9, 1, 2, 3, 4, 5, 6, 7, 8];
            let nodeDegree = [0, 40, 80, 120, 160, 200, 240, 280, 320];
            let nodeColor = ['#27749C', '#2FB478', '#6DCD38', '#E6C742', '#FF4C58', '#F856BD', '#D460F1', '#886AEA', '#7399E4', '#7CD4DD']
            let labels = ['Reformer', 'Helper', 'Achiever', 'Individualist', 'Investigator', 'Loyalist', 'Enthusiast', 'Challenger', 'Peacemaker']

            nodes = []
            for (let i = 0; i < nodeIDs.length; i++) {
                dict = { nodeID: nodeIDs[i], degree: nodeDegree[i], color: nodeColor[i], label: labels[i] };
                nodes.push(dict);
            }

            links = []
            sources = [9, 9, 3, 1, 1, 2, 2, 5, 5]
            targets = [3, 6, 6, 4, 7, 8, 4, 8, 7]

            for (let i = 0; i < sources.length; i++) {
                dict = { source: sources[i], target: targets[i] };
                links.push(dict);
            }


            nodes.forEach(d => {
                d.x = origin + (radius * Math.sin(0));
                d.y = origin - (radius * Math.cos(0));

            })

            var simEnneagram = d3.forceSimulation()
                .nodes(nodes)
                .force("links", d3.forceLink()
                    .links(links)
                    .id(d => d['nodeID']))
                .stop()

            let circles = enneagramSelector.selectAll('g.circleNodes').data(nodes)
                .join('g')
                .attr('class', 'circleNode')
                .attr('transform', d => `rotate(${d.degree},${origin},${origin})`)

            nodeCircles = circles.append('circle')
                // SOURCE: drawing circles around a circle
                // https://spin.atomicobject.com/2015/06/12/objects-around-svg-circle-d3-js/
                .attr('class', 'circle.node')
                .join('circle')
                .attr('r', 25)
                .attr('fill', d => d.color)
                .attr('cx', d => d.x)
                .attr('cy', d => d.y)
                .attr('id', d => d.nodeID);


            let lines = enneagramSelector.selectAll("g.link").data(links)
                .join('path')
                .append('path')
                .attr("class", "link")
                .style("stroke", "black")
                .attr('stroke-width', 4)
                .attr("x1", d => d.source.x * d.source.nodeID).attr("x2", d => d.target.x * d.target.nodeID)
                .attr("y1", d => d.source.y * d.source.nodeID).attr("y2", d => d.target.y * d.target.nodeID);



            nodeLabels = circles
                .append('text')
                .text(d => d.nodeID)
                .attr('pointer-events', 'none')
                .attr('text-anchor', 'middle')
                .attr('alignment-baseline', 'middle')
                .style('font-size', '25px')
                .attr('fill', 'white')
                .attr('x', origin + (radius * Math.sin(0)))
                .attr('y', origin - (radius * Math.cos(0)))


            nodeNames = circles
                .append('text')
                .text(d => d.label)
                .attr('pointer-events', 'none')
                .attr('text-anchor', 'middle')
                .attr('alignment-baseline', 'middle')
                .style('font-size', '14px')
                .attr('fill', 'black')
                .attr('x', origin + (radius + 10 * Math.sin(0)))
                .attr('y', origin - (radius * Math.cos(0)))
                .attr('transform', `translate(-50,-10)`)

            console.log('running_compat outside of onclick node')
            console.log(running_compat)
            
            nodeCircles
                .classed('outline', false)
                .on('mouseover', function () {
                    let enn = d3.select(this);
                    // console.log(enn);
                    enn.transition().duration(100)
                        .attr("stroke-width", 7)
                        .style("stroke-opacity", .8)
                        .style("stroke", '#d90077')
                })
                .on('mouseout', function () {
                    let enn = d3.select(this);
                    let ennOutline = enn.classed('outline');
                    if (!ennOutline) {
                        // console.log(enn);
                        enn.transition().duration(200)
                            .attr("stroke-width", 0)
                    }

                })
                .on('click', function () {
                    nodeCircles.attr('stroke-width', 0).classed('outline', false);
                    let enn = d3.select(this);
                    enn.attr('stroke-width', 7).style('stroke-opacity', .8)
                    let ennID = enn.node().id;

                    console.log('ennID');
                    console.log(ennID);
                    enn.attr('stroke', '#d90077')


                    enn.classed('outline', true);
                    enn.classed('outline', true);

                    mbtiBars(getCharacterInfo(ennID, true));
                    makeCards(running_graphnames);
                })


            }
        
        getCompatibility();


    </script>
</body>

</html>